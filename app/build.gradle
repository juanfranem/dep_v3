plugins {
    id 'com.android.application'
    id 'com.google.dagger.hilt.android'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.firebase-perf'
    id 'com.google.firebase.crashlytics'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-kapt'
}

ext {
    versionMajor = 4
    versionMinor = 0
    versionExtraMinor = 3
}

android {
    signingConfigs {
        releaseKey {
            def keyFileName = "../key.properties"
            if (file(keyFileName).exists()) {
                def props = new Properties()
                file(keyFileName).withInputStream { props.load(it) }
                storeFile file(props.getProperty("RELEASE_STORE_FILE"))
                keyAlias props.getProperty("RELEASE_KEY_ALIAS")
                keyPassword props.getProperty("RELEASE_KEY_PASSWORD")
                storePassword props.getProperty("RELEASE_STORE_PASSWORD")
            } else {
                storeFile file(project["storeFile"])
                keyAlias project["keyAlias"]
                keyPassword project["keyPass"]
                storePassword project["storePass"]
            }
        }
    }
    namespace 'com.virgendelosdoloreslacarlota.dep'
    compileSdk 33

    defaultConfig {
        applicationId "com.virgendelosdoloreslacarlota.dep"
        minSdk 21
        targetSdk 33
        compileSdk 33
        versionName computeVersionName()
        versionCode computeVersionCode()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            manifestPlaceholders = [scheme: "https", host: "virgendelosdoloreslacarlota.com"]
            signingConfig signingConfigs.releaseKey
        }
        debug {
            manifestPlaceholders = [scheme: "https", host: "virgendelosdoloreslacarlota.com"]
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        viewBinding true
    }

}

dependencies {
    def lifecycle_version = "2.5.1"
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.8.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // Projects
    implementation project(':data')
    implementation project(':domain')

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:31.0.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-perf-ktx'

    // Utils
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'io.coil-kt:coil:2.2.2'
    implementation "androidx.paging:paging-runtime:3.1.1"
    implementation "androidx.browser:browser:1.4.0"

    // Hilt
    implementation "com.google.dagger:hilt-android:2.44"
    implementation 'androidx.hilt:hilt-navigation-fragment:1.0.0'
    kapt "com.google.dagger:hilt-compiler:2.44"

    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

def computeVersionName() {
    // Basic <major>.<minor> version name
    return String.format('%d.%d.%d', versionMajor, versionMinor, Integer.valueOf(System.env.BUILD_NUMBER ?: versionExtraMinor))
}

// Will return 120042 for Jenkins build #42
def computeVersionCode() {
    // Major + minor + Jenkins build number (where available)
    return (versionMajor * 100000) + (versionMinor * 10000) + Integer.valueOf(System.env.BUILD_NUMBER ?: versionExtraMinor)
}

kapt {
    correctErrorTypes true
}